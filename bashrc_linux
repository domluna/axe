#!/bin/bash
# cool stuff bucko
export PS1="Î» \w: "
export LC_ALL="C.UTF8"
export LANG="C.UTF8"

export GOPATH="$HOME/go"

# History control
shopt -s histappend
HISTCONTROL=ignoreboth
HISTSIZE=32768
HISTFILESIZE="${HISTSIZE}"
# # Avoid duplicates
# HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
# shopt -s histappend

# After each command, append to the history file and reread it
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

if [ -f "$HOME/.tokens" ]; then
  source $HOME/.tokens
fi

export EDITOR=nvim

alias j='julialauncher'
alias jn='julialauncher +nightly'
alias js='julialauncher --startup-file=no --history-file=no'

alias ..='cd ..'
alias gst='git status'
alias ga='git add'
alias gc='git commit'
alias md='mkdir -p'
alias gp='git push'
alias sudo2='sudo -E env "PATH=$PATH"'
if command -v bat > /dev/null; then
   alias cat='bat'
fi
if command -v python3.11 > /dev/null; then
   alias python3='python3.11'
   alias py='python3.11'
fi
# alias python='python3'
alias ipy='ipython'
jfmt () {
   local dir=${1:-.}
   julialauncher --startup-file=no --history-file=no -e "using JuliaFormatter; format(\"$dir\")"
}

export FZF_DEFAULT_OPTS='--height 80% --reverse --inline-info'
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude '{.git,.mypy_cache,node_modules,vendor}/'"

bind -x '"\C-p": nvim $(fzf);'

tm() {
   [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
   if [ $1 ]; then
      tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
   fi
   session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
eval "$(zoxide init bash)"

export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH

export GO111MODULE=on
export PATH="/usr/local/go/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

export PATH="$HOME/.deno/bin:$PATH"

if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# easy place to put manually downloaded binaries
export PATH="$HOME/bin:$PATH"

function gcob() {
   git branch | grep --invert-match '\*' | cut -c 3- |
      fzf --multi --preview="git log {}" |
      xargs --no-run-if-empty git checkout
}

# rust
. "$HOME/.cargo/env"

export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

if command -v fzf-share >/dev/null; then
  source "$(fzf-share)/key-bindings.bash"
  source "$(fzf-share)/completion.bash"
fi

RG() {
  RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
  INITIAL_QUERY="$1"
  local selected=$(
    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY' || true" \
      fzf --bind "change:reload:$RG_PREFIX {q} || true" \
          --ansi --disabled --query "$INITIAL_QUERY" \
          --delimiter : \
          --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
          --preview-window '~3:+{2}+3/2'
  )
  [ -n "$selected" ] && $EDITOR "$selected"
}

command -v bat  > /dev/null && export FZF_CTRL_T_OPTS="--preview 'bat -n --color=always {}'"

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# >>> juliaup initialize >>>

# !! Contents within this block are managed by juliaup !!

case ":$PATH:" in *:/home/dom/.juliaup/bin:*);; *)
    export PATH=/home/dom/.juliaup/bin${PATH:+:${PATH}};;
esac

# <<< juliaup initialize <<<

# avm (Anchor)
export PATH="/home/dom/.avm/bin:$PATH"

export PATH="$PATH:/home/dom/.foundry/bin"

export FLYCTL_INSTALL="/home/dom/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

BUN_INSTALL="/home/dom/.bun"
PATH="$BUN_INSTALL/bin:$PATH"

eval "$(direnv hook bash)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Wasmer
export WASMER_DIR="/home/dom/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

export WASMTIME_HOME="$HOME/.wasmtime"

export PATH="$WASMTIME_HOME/bin:$PATH"

export PATH="$HOME/.local/bin:$PATH"

# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

# Enable programmable completion features
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

###-begin-neonctl-completions-###
#
# yargs command completion script
#
# Installation: neonctl completion >> ~/.bashrc
#    or neonctl completion >> ~/.bash_profile on OSX.
#
_neonctl_yargs_completions()
{
    local cur_word args type_list

    cur_word="${COMP_WORDS[COMP_CWORD]}"
    args=("${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$(neonctl --get-yargs-completions "${args[@]}")

    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ ${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _neonctl_yargs_completions neonctl
###-end-neonctl-completions-###

# pnpm
export PNPM_HOME="/home/dom/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
#

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/dom/google-cloud-sdk/path.bash.inc' ]; then . '/home/dom/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/dom/google-cloud-sdk/completion.bash.inc' ]; then . '/home/dom/google-cloud-sdk/completion.bash.inc'; fi

# source "$HOME/.rye/env"
#
export PATH="$PATH:/home/dom/.local/share/omakub/bin"

export OMAKUB_PATH="/home/$USER/.local/share/omakub"

source /usr/share/bash-completion/bash_completion
# source /usr/share/doc/fzf/examples/key-bindings.bash

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

export DOCKER_HOST=unix:///var/run/docker.sock

export PATH="$PATH:$HOME/zig-linux-x86_64-0.13.0"

export PATH="$PATH:$HOME/squashfs-root/usr/bin"

alias ai='howdoi -v -m "mini" --system-prompt "Write your response in markdown format"'

export PATH="$HOME/.local/kitty.app/bin:$PATH"
